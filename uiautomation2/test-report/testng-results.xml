<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="3" passed="2">
  <reporter-output>
    <line>
      <![CDATA[I just want to add some log to the report.]]>
    </line>
  </reporter-output>
  <suite name="SmokeTest" duration-ms="30" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
    <groups>
    </groups>
    <test name="Regression1" duration-ms="30" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
      <class name="casest.BasicCase">
        <test-method status="PASS" signature="prepare()[pri:0, instance:casest.BasicCase@622a0509]" name="prepare" is-config="true" duration-ms="8" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prepare -->
        <test-method status="PASS" signature="mtest1()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest1" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest1 -->
        <test-method status="PASS" signature="test1()[pri:0, instance:casest.BasicCase@622a0509]" name="test1" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="mtest2()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest2" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest2 -->
        <test-method status="FAIL" signature="test2()[pri:0, instance:casest.BasicCase@622a0509]" name="test2" duration-ms="2" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.fail(Assert.java:102)
at casest.BasicCase.test2(BasicCase.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1249)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141)
at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90)
at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
at com.sun.proxy.$Proxy2.stop(Unknown Source)
at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:132)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[I just want to add some log to the report.]]>
            </line>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method status="PASS" signature="mtest1()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest1" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest1 -->
        <test-method status="PASS" signature="mtest2()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest2" is-config="true" duration-ms="1" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest2 -->
        <test-method status="PASS" signature="test3()[pri:0, instance:casest.BasicCase@622a0509]" name="test3" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test3 -->
        <test-method status="PASS" signature="mtest1()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest1" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest1 -->
        <test-method status="PASS" signature="mtest2()[pri:0, instance:casest.BasicCase@622a0509]" name="mtest2" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mtest2 -->
        <test-method status="PASS" signature="clear()[pri:0, instance:casest.BasicCase@622a0509]" name="clear" is-config="true" duration-ms="0" started-at="2019-10-11T16:27:55 CST" finished-at="2019-10-11T16:27:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- clear -->
      </class> <!-- casest.BasicCase -->
    </test> <!-- Regression1 -->
  </suite> <!-- SmokeTest -->
</testng-results>
